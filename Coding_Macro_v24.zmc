Sub ZMain()

  Dim CustomerName, Address2, City, State,LicenseKey ,responseText1, ZipCode, Address_disp ,Coordinates,update_latlong,update_geolocation,update_address,MyArray,Latitude,Longitude,addr
  Dim xmlRequest,Addresses,xmlData, rcstrt, rcend, rc, ret, operator, statestrt, stateend, State_n, addrstrt, addrend, Address2_n, citystrt, cityend, City_n,zipstrt,zipend,Zipcode_n 
  Dim AddressURLbing,AddressLineBing, AddressURLgoogle,AddressLineGoogle,rcupdate      
              
  'USE THE LICENSE KEY IN CASE WE GET INVALID KEY 
  'LicenseKey=""
  LicenseKey="474208d0-90bc-488d-933b-23fedf3d12fd"
  
  'GET THE ADDRESS, CITY, STATE, ZIP FROM THE SCREEN FOR THE CURRENT ROW.
  Address2 = UCase(Trim(GetString (15,11,25)))
  City = UCase(Trim(GetString (16,11,25)))
  State = UCase(Trim(GetString (17,11,2)))
  ZipCode = UCase(Trim(GetString (17,14,5)))
  ZipCode2 = UCase(Trim(GetString (17,20,4)))

  'RETURNS THE XML RESPONSE FOR THE ABOVE ADDRESS DETAILS FROM THE SCREEN 
  xmlData = cdyne(LicenseKey,Address2,City,State,ZipCode) 
  
  'WRITES THE XML RESPONSE INTO AN OUTPUT FILE
  call WriteXMLInFile(xmlData)

  'SETUP THE XML RESPONSE IN DOM MODEL TO READ THE DATA WITHIN THE TAGS
  Set objXMLDoc  = CreateObject("Microsoft.XMLDOM")
  objXMLDoc.async = false
  objXMLDoc.loadXML(xmlData)

  
  'EXTRACT THE RETURN CODE, PRIMARY AND SECONDARY ADDRESS FROM THE CDYNE RESPONSE     
  Set Root = objXMLDoc.documentElement
  Set rc = Root.getElementsByTagName("ReturnCode")(0)                                        
  
  Set pdl = Root.getElementsByTagName("PrimaryDeliveryLine")(0)
  Address2_n = pdl.text
  Address2_n = UCase(Address2_n)

  Set sdl = Root.getElementsByTagName("SecondaryDeliveryLine")(0)
  Address2_n_sec = sdl.text

  'TO MODIFY THE ADDRESS LINE ACCORDING TO THE ACCEPTABLE FORMAT OF GOOGLE AND BING
  AddressLineGoogle = Replace(Address2_n," ","+")
  AddressLineBing = Replace(Address2_n," ","%20")
  AddressLineGoogle_scr = Replace(Address2," ","+")
  AddressLineBing_scr = Replace(Address2," ","%20")

  'EXTRACT THE CITY, STATE, ZIPCODE FROM THE CDYNE RESPONSE
  Set sa = Root.getElementsByTagName("StateAbbreviation")(0)
  State_n = sa.text
  State_n = Ucase(State_n)
  Set pcn = Root.getElementsByTagName("PreferredCityName")(0)
  City_n = pcn.text
  City_n = Ucase(City_n)  
                                             
  'SETUP THE ADDRESS URL TO QUERY GOOGLE AND BING TO FETCH THE LAT/LNG'S
  AddressURLgoogle = AddressLineGoogle+"+"+City_n+"+"+State_n
  AddressURLbing= State+"/"+Zipcode+"/"+City+"/"+AddressLineBing
  AddressURLgoogle_scr = AddressLineGoogle_scr+"+"+City+"+"+State
  AddressURLbing_scr = State+"/"+Zipcode+"/"+City+"/"+AddressLineBing_scr
  
  'FOR DISPLAYING ADDRESS ON THE ADDRESS VERIFICATION & ADDRESS VALIDATION BOX

  'ERROR HANDLING FOR THE VARIOUS RESPONSE CODES FROM CDYNE
  Select Case rc.text 
    Case "1"
      msgbox "Invalid input! Verify customer address and update, or update through MCUS"
      rcvalid = 0
      Exit Sub
    Case "2"
      msgbox "Invalid License Key"
      rcvalid = 0
      Exit Sub
    Case "10"
      msgbox "Input Address is not found! Verify customer address and update, or update through MCUS"
      rcvalid = 0
      Exit Sub
    Case "100"
      rcvalid = 1      
    Case "101" 
      rcvalid = 1
    Case "102"     
      rcvalid = 2
    Case "103"     
      rcvalid = 2
    Case Else
      msgbox "Unknown return code"+rc.text
      rcvalid = 0
  End Select
  'Gets the Zipcode from the Preferred Address 
  If rc.text=102 or rc.text=103 Then
    Set Root1 = objXMLDoc.documentElement 
    Set NodeList = Root1.getElementsByTagName("ZipCode")
    Zip_num=0
    For Each Elem In NodeList 
       Zip_num= Zip_num + 1
    Next  
    Set Root = objXMLDoc.documentElement 
    Set zc = Root.getElementsByTagName("ZipCode")(Zip_num-1)
    Zipcode_n = Left(zc.text,5)
    Zipcode_disp = zc.text
    If Len(zc.text)=5 THEN
      Zipcode_n1=zc.text
      Zipcode_n2=""
    Else
      MyArray1 = Split(Zipcode_disp,"-", -1, 1)
      Zipcode_n1= MyArray1(0)
      Zipcode_n2= MyArray1(1)
    End If
  Else
    Set zc = Root.getElementsByTagName("ZipCode")(0)
    Zipcode_n = Left(zc.text,5)
    Zipcode_disp = zc.text
    If Len(zc.text)=5 THEN
      Zipcode_n1=zc.text
      Zipcode_n2=""
    Else
      MyArray1 = Split(Zipcode_disp,"-", -1, 1)
      Zipcode_n1= MyArray1(0)
      Zipcode_n2= MyArray1(1)
    End If
  End If   
  
  Address_disp = Address2_n&vbNewline+"    "+City_n+", "+State_n+" "+Zipcode_disp
  Address_disp_ex = Address2_n&vbnewline+City_n+", "+State_n+" "+Zipcode_disp

  'TO HANDLE THE NO. OF VALID ADDRESSES RETURNED FROM THE CDYNE
  '0 - NO ADDRESS RETURNED. EXIT THE MACRO.
  '1 - SINGLE ADDRESS RETURNED. ADDRESS MATCHES PROCEED WITH LAT/LNG'S. IF NOT DISPLAY THE CORRECTED ADDRESS, 
  '    ASK FOR THE USER'S PERMISSION TO UPDATE IT, AFTER THAT PROCEED FETCHING FOR THE LAT/LNG'S.
  '2 - ADDRESSES RETURNED WITH MULTIPLE ADDRESS TAG/S. HANDLED IN THE CASEMULTIPLE LOGIC.
  Select Case rcvalid
    Case 1
      
      'COMPARE THE ADDRESS ON THE SCREEN WITH THE CDYNE ADDRESS
      result_compare_addr=StrComp(Address2,Address2_n,1)
      result_compare_city=StrComp(City,City_n,1)
      result_compare_state=StrComp(State,State_n,1)
      result_compare_zip1=StrComp(Zipcode,Zipcode_n1,1)
      result_compare_zip2=StrComp(ZipCode2,Zipcode_n2,1)

      If (result_compare_addr = 0) And (result_compare_city = 0) And (result_compare_state = 0) And (result_compare_zip1 = 0) And (result_compare_zip2 = 0) Then
      'If (result_compare_addr = 0) And (result_compare_city = 0) And (result_compare_state = 0) And (result_compare_zip1 = 0) Then
        Coordinates = LatLng(AddressURLgoogle,AddressURLbing)
        MyArray = Split(Coordinates, ",", -1, 1)
        Latitude= MyArray(0)
        Longitude = MyArray(1)

        'UPDATES THE LAT/LNG'S ON THE SCREEN  
        LatLngOK = LatLongUpdate(Latitude,Longitude)

        If LatLngOK = 1 Then
          rcupdate = 3
        Else
          rcupdate = 0
        End If
      Else 
        'DISPLAY'S THE CORRECTED ADDRESS ON THE SCREEN & ASKS FOR USER'S PERMISSION TO UPDATE 
        update_address = MsgBox("The updated address is -"&vbNewline+Address_disp_ex&vbNewline&vbNewline+"Press Yes to update the address"&vbNewline+"Press No to keep Original", vbYesNo, "Address Validation") 

        Select Case update_address
           
        Case vbYes                   
        
          'UPDATES THE ADDRESS ON THE SCREEN
          call AddressUpdate(Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2)

          Coordinates = LatLng(AddressURLgoogle,AddressURLbing)
          MyArray = Split(Coordinates, ",", -1, 1)
          Latitude= MyArray(0)
          Longitude = MyArray(1)

          'UPDATES THE LAT/LNG'S ON THE SCREEN
          LatLngOK = LatLongUpdate(Latitude,Longitude)
  
          'COMPARISON          
          If LatLngOK = 1 Then
            rcupdate = 2
          Else
            rcupdate = 1
          End If
          
        Case vbNo

          Coordinates = LatLng(AddressURLgoogle_scr,AddressURLbing_scr)
          MyArray = Split(Coordinates, ",", -1, 1)
          Latitude= MyArray(0)
          Longitude = MyArray(1)
          LatLngOK = LatLongUpdate(Latitude,Longitude)

          If LatLngOK = 1 Then
            rcupdate = 3
          Else
            rcupdate = 0
          End If

        End Select
	    End If
    Case 2

      'RCMULTIPLE - 0 --> EXIT THE MACRO
      'RCMULTIPLE - 1 --> SINGLE ADDRESS IS RETURNED
      'RCMULTIPLE - 2 --> MULTIPLE ADDRESSES ARE RETURNED

      rcmultiple = caseMultiple(xmlData,Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2,Address_disp,Address2)
      
      Address2_n = UCase(Address2_n)
      City_n = UCase(City_n)
      State_n = Ucase(State_n)

      Select Case rcmultiple
      Case 0
        Exit Sub
      Case 1
        result_compare_addr=StrComp(Address2,Address2_n,1)
        result_compare_city=StrComp(City,City_n,1)
        result_compare_state=StrComp(State,State_n,1)
        result_compare_zip1=StrComp(Zipcode,Zipcode_n1,1)
        result_compare_zip2=StrComp(Zipcode2,Zipcode_n2,1)

        If (result_compare_addr = 0) And (result_compare_city = 0) And (result_compare_state = 0) And (result_compare_zip1 = 0) And (result_compare_zip2 = 0) Then

          'FETCHES LAT/LNG'S FROM GOOGLE/BING SPLIT THE VALUE RETURNED FROM LatLng FUNCTION INTO SEPARATE VARIABLES 
          Coordinates = LatLng(AddressURLgoogle,AddressURLbing)
          MyArray = Split(Coordinates, ",", -1, 1)
          Latitude= MyArray(0)
          Longitude = MyArray(1)

          'UPDATES THE LAT/LNG'S ON THE SCREEN  
          LatLngOK = LatLongUpdate(Latitude,Longitude)

          'CHECKS FOR THE UPDATES OF LAT/LNG'S AND THE ADDRESS ON THE SCREEN
          If LatLngOK = 1 Then
            rcupdate = 3
          Else
            rcupdate = 0
          End If
        Else  
          'DISPLAY'S THE CORRECTED ADDRESS ON THE SCREEN & ASKS FOR USER'S PERMISSION TO UPDATE
          update_address = MsgBox("The updated address is -"&vbNewline+Address_disp_ex&vbNewline&vbNewline+"Press Yes to update the address"&vbNewline+"Press No to keep Original", vbYesNo, "Address Validation") 
          Select Case update_address
          Case vbYes
            call AddressUpdate(Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2)

            'FETCHES LAT/LNG'S FROM GOOGLE/BING SPLIT THE VALUE RETURNED FROM LatLng FUNCTION INTO SEPARATE VARIABLES 
            Coordinates = LatLng(AddressURLgoogle,AddressURLbing)
            MyArray = Split(Coordinates, ",", -1, 1)
            Latitude= MyArray(0)
            Longitude = MyArray(1)

            'UPDATES THE LAT/LNG'S ON THE SCREEN
            LatLngOK = LatLongUpdate(Latitude,Longitude)

            'CHECKS FOR THE UPDATES OF LAT/LNG'S AND THE ADDRESS ON THE SCREEN
            If LatLngOK = 1 Then
              rcupdate = 2
            Else
              rcupdate = 1
            End If
            
          Case vbNo

            'FETCHES LAT/LNG'S FROM GOOGLE/BING SPLIT THE VALUE RETURNED FROM LatLng FUNCTION INTO SEPARATE VARIABLES 
            Coordinates = LatLng(AddressURLgoogle_scr,AddressURLbing_scr)
            MyArray = Split(Coordinates, ",", -1, 1)
            Latitude= MyArray(0)
            Longitude = MyArray(1)
            
            'UPDATES THE LAT/LNG'S ON THE SCREEN
            LatLngOK = LatLongUpdate(Latitude,Longitude)

            'CHECKS FOR THE UPDATES OF LAT/LNG'S AND THE ADDRESS ON THE SCREEN 
            If LatLngOK = 1 Then
              rcupdate = 3
            Else
              rcupdate = 0
            End If

          End Select 
        End If  
      Case 2
          'FOR CASE MULTIPLES THE UPDATE LOGIC IS HANDLED SEPARATELY
          rcupdate = 4
      End Select
    Case Else
      rcupdate = 4
      Exit Sub
  End Select		 

  'UPDATE THE FINAL MESSAGE DISPLAYING THE UPDATES DONE ON THE SCREEN 
  Select Case rcupdate
    Case 0
      msgbox "Address not updated and the lat/lng's have been updated."
    Case 1
      msgbox "Address and the lat/lng's have been updated." 
    Case 2
      msgbox "Address has been updated and the lat/lng's are not updated."
    Case 3
      msgbox "Address and the lat/lng's are not updated." 
    Case Else
      'NO MESSAGE BOX WILL UPDATE AND CODE ENDS    
  End Select         
End Sub
'----------------------------------END OF CODE---------------------------------------------------------
'------------------------------FUNTIONS STARTS HERE----------------------------------------------------

'RETURNS THE RESPONSE FROM CDYNE FOR THE ADDRESS ON THE SCREEN
Function cdyne(LKey,Addr,city,state,zip)
  Dim cXML, oXMLHttp

  'SEND THE ABOVE DETAILS TO QUERY CDYNE AND FETCH THE CORRECTED DETAILS.
 
  cXML =  "<PavRequest xmlns=""pav3.cdyne.com"">" & _
          "<CityName>"+city+"</CityName>" & _
          "<FirmOrRecipient></FirmOrRecipient>" & _
          "<LicenseKey>"+LKey+"</LicenseKey>" & _
          "<PrimaryAddressLine>"+Addr+"</PrimaryAddressLine>" & _
          "<ReturnCaseSensitive>true</ReturnCaseSensitive>" & _
          "<ReturnCensusInfo>true</ReturnCensusInfo>" & _
          "<ReturnCityAbbreviation>true</ReturnCityAbbreviation>" & _
          "<ReturnGeoLocation>true</ReturnGeoLocation>" & _
          "<ReturnLegislativeInfo>true</ReturnLegislativeInfo>" & _
          "<ReturnMailingIndustryInfo>true</ReturnMailingIndustryInfo>" & _
          "<ReturnResidentialIndicator>true</ReturnResidentialIndicator>" & _
          "<ReturnStreetAbbreviated>true</ReturnStreetAbbreviated>" & _
          "<SecondaryAddressLine></SecondaryAddressLine>" & _
          "<State>"+state+"</State>" & _
          "<Urbanization></Urbanization>" & _
          "<ZipCode></ZipCode>" & _
          "</PavRequest>"

  'SEND THE XML REQUEST TO CDYNE
  Set oXMLHttP = CreateObject("Microsoft.XMLHTTP")
  Call oXMLHttp.Open("POST", "http://pav3.cdyne.com/PavService.svc/VerifyAddressAdvanced", False)
  Call oXMLHttp.setRequestHeader("Content-Type", "text/xml")        
  Call oXMLHttp.send(cXML)

  'CHECK WHETHER WE GOT ANY RESPONSE FROM THE XML REQUEST
  If oXMLHttp.Status = 200 Then
    cdyne = oXMLHttp.responseText
  End If

End Function
'----------------------------------------------------------------------------------------------------------------'
'FOR RC= 102 OR 103, MULTIPLE MATCHES OF THE SAME ADDRESS ARE RETURNED
Function caseMultiple(xmlData,Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2,Address_disp,Address2)
  
  'CONVERT ADDRESS TO UPPER CASE
  Address2_n = UCase(Address2_n)
  City_n = UCase(City_n)
  State_n = Ucase(State_n)

  Dim x,disp_box,PrimaryAddressNo,y,suffix,preDirectional,streetName
  Dim counter, flag

  Dim Address(10)
  Dim PrimaryAddr(10)
  Dim Zipcode_1(10)
  Dim Zipcode_2(10)
  Dim Address_comp(10)
  Dim primaryHigh(10)
  Dim primaryLow(10)
  
  'INITIALIZE COUNTER
  x=1
  y=1
  'SETUP THE XML RESPONSE IN DOM MODEL TO READ THE DATA WITHIN THE TAGS
  Set objXMLDoc  = CreateObject("Microsoft.XMLDOM")
  objXMLDoc.async = false
  objXMLDoc.loadXML(xmlData)

  Set Root = objXMLDoc.documentElement 
  Set NodeList = Root.getElementsByTagName("AddressInfo")

  'GET EACH ADDRESS
  For Each Elem In NodeList 
    Flag = 0
    'msgbox "Address Number: " & x
    Set PH = Elem.getElementsByTagName("PrimaryHigh")(0)
    Set PL = Elem.getElementsByTagName("PrimaryLow")(0)
    Set Suffix = Elem.getElementsByTagName("Suffix")(0)
    Set PreDirectional = Elem.getElementsByTagName("PreDirectional")(0)
    Set StreetName = Elem.getElementsByTagName("StreetName")(0)
    Set Zip = Elem.getElementsByTagName("ZipCode")(0)

      primaryHigh(x) = PH.text
      primaryLow(x) = PL.text
      'CONVERT INFO TO UPPER CASE
      suffix = UCase(Suffix.text)
      preDirectional = UCase(PreDirectional.text)
      streetName= UCase(StreetName.text)
      
      'ADD TO ARRAY
      If Len(Zip.text)=5 THEN
        Zipcode_1(x)=Zip.text
        Zipcode_2(x)=""
      Else
        MyArray1 = Split(Zip,"-", -1, 1)
        Zipcode_1(x)= MyArray1(0)
        Zipcode_2(x)= MyArray1(1)
      End If
      PrimaryAddressNo = primaryHigh(x)
    
      Address_comp(x)= PrimaryAddressNo+" "+preDirectional+" "+streetName+" "+suffix 
      aDDRESS_TEMP =Address_comp(x)
      'msgbox aDDRESS_TEMP
      Address_comp(x)= Replace(Address_comp(x),"  "," ")
     'msgbox "address"&x &": "& Address_comp(x) 
      'msgbox "PREFERRED: "& Address2_n&" "&Zipcode_n1 & " Before Change: "&aDDRESS_TEMP&" AFTER Change: "& Address_comp(x)
    
    'Check 1 - Elminates the Range interpolated Address if any  
    IF Cint(primaryHigh(x)) <> Cint(primaryLow(x)) Then
      ' do nothing
      'msgbox "address" & x & "elminated- RANGE_INTERPOLATED"
    else
      'Check 2 - Compares Each Address in the XML with the Preferred Address
      
      IF Address_comp(x) = Address2_n and Zipcode_1(x) = Zipcode_n1 and Zipcode_2(x)=Zipcode_n2 then
          flag = 1
      'msgbox "address" & x & "elminated- Pref add match"
      Else
        For counter = 2 to y
          IF Address_comp(counter) = Address_comp(y) and Zipcode_1(counter) = Zipcode_1(y) and Zipcode_2(counter) = Zipcode_2(y) then
             'msgbox "counter: "& counter& "vs y : "& y
            flag = 1
          END IF
        Next
      End IF 
      
      If flag = 1 Then
        'DO NOT DISPLAY IT IS SAME
      Else
        y=y+1
        'DISPLAY IN INPUT BOX
        Address(y) = PrimaryAddressNo+" "+preDirectional+" "+streetName+" "+Suffix&vbNewline+"    "+City_n+", "+State_n+" "+Zip.text&vbNewline&vbNewline
        
        Do While (InStr(Address(y), "  "))
        	Address(y)= Replace(Address(y),"  "," ")
    	Loop

        'SEND TO GOOGLE API
        PrimaryAddr(y) = PrimaryAddressNo+" "+preDirectional+" "+streetName+" "+suffix

        Do While (InStr(PrimaryAddr(y), "  "))
        	PrimaryAddr(y)= Replace(PrimaryAddr(y),"  "," ")
    	Loop
        'INCREMENT THE COUNTER
        'PROBLEM CODE -- NEED TO FIX BEFORE PUTTING IN PRODUCTION
        y=Left(y,1)
        
        Addresses = Addresses+y+": "+Address(y)
        
      End If 
    End If
    x=x+1
  Next 

  If y=1 Then
    'THERE IS NOTHING IN THE UNIQUE ARRAY
    caseMultiple = 1
  Else If y>1 then
    'dipslay the preffered address 
    'display the elements in the unique array
    disp_box= "1: "+Address_disp&vbNewline+"    (Preferred Address)"&vbNewline&vbNewline+Addresses&vbNewline+"Please enter the serial no. of the address you would like to proceed with-"
    
    resp = InputBox(disp_box,"Address Verification")
    
    'INPUT BOX VALIDATION
     'IN CASE 'OK' IS PRESS WITH BLANKS,SPECIAL CHARACTERS, ALPHABETS OR ANY INVALID ENTRY ERROR MESSAGE IS RETURNED.
    If resp="" Then
      If Vartype(resp) = EMPTY then
        caseMultiple = 0
      Else   
        msgbox "Please make a valid selection"
        call caseMultiple(xmlData,Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2,Address_disp,Address2)
      End IF
    Else
      If resp = "0" or isNumeric(resp) = false Then
      msgbox "Please make a valid selection"
      call caseMultiple(xmlData,Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2,Address_disp,Address2)
      'caseMultiple = 0
      Else
        resp= Int(resp)
        'IF THE PREFERRED ADDRESS IS SELECTED
        If resp = 1 Then
            call AddressUpdate(Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2)
            AddressLineGoogle = Replace(Address2_n," ","+")
            AddressLineBing = Replace(Address2_n," ","%20")
            AddressURLbing= State_n+"/"+Zipcode_n1+"/"+City_n+"/"+AddressLineBing
            AddressURLgoogle = AddressLineGoogle+"+"+City_n+"+"+State_n
            Coordinates = LatLng(AddressURLgoogle,AddressURLbing)
            MyArray = Split(Coordinates, ",", -1, 1)
            Latitude= MyArray(0)
            Longitude = MyArray(1)
        
            LatLngok = LatLongUpdate(Latitude,Longitude)

            If LatLngOK = 1 Then
              msgbox "Address has been updated and the lat/lng's are not updated."
            Else
              msgbox "Address and the lat/lng's have been updated." 
            End If 
        Else 
          'IF ANY VALID INPUT OTHER THAN 1 IS SELECTED
          IF (resp-y)<= 0 AND resp > 0 Then
            Address2_n = PrimaryAddr(resp)
            Zipcode_n1 = Zipcode_1(resp)
            Zipcode_n2 = Zipcode_2(resp)
            call AddressUpdate(Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2)
            Address2_n=Replace(Address2_n,"  "," ")
            AddressLineGoogle = Replace(Address2_n," ","+")
            AddressLineBing = Replace(Address2_n," ","%20")
            AddressURLbing= State_n+"/"+Zipcode_n1+"/"+City_n+"/"+AddressLineBing
            AddressURLgoogle = AddressLineGoogle+"+"+City_n+"+"+State_n
            
            Coordinates = LatLng(AddressURLgoogle,AddressURLbing)
            MyArray = Split(Coordinates, ",", -1, 1)
            Latitude= MyArray(0)
            Longitude = MyArray(1)
        
            LatLngOK = LatLongUpdate(Latitude,Longitude)

            If LatLngOK = 1 Then
              msgbox "Address has been updated and the lat/lng's are not updated."
            Else
              msgbox "Address and the lat/lng's have been updated." 
            End If
          Else
            msgbox "Please make a valid selection"
            call caseMultiple(xmlData,Address2_n,City_n,State_n,Zipcode_n1,Zipcode_n2,Address_disp,Address2)
          End If
        End If
        caseMultiple = 2
      End If 
    End If 
  End If
  End If       
End Function
'----------------------------------------------------------------------------------------------------------------'
'FETCHES GEOLOCATION FROM THE GOOGLE, IF NOT FROM GOOGLE THEN FROM BING 
Function LatLng (AddressURLgoogle,AddressURLbing)

  Dim BaseURL, FinalURL
  Dim xmlRequest, xmlData, latPos, lat, lngPos, lng, pos, loctype, loc, todayOnly, statstrt, statend, stat, ret, operator
  Dim matchType, partMatch, partMatchStrt, partMatchEnd, resStrt, resEnd, resData

    'PART OF URL THAT HITS THE GOOGLE SERVERS TO GET LAT/LNG
    BaseURL = "https://maps.googleapis.com/maps/api/geocode/xml?address="

  
    'GENERATING THE ENTIRE URL WITH ADDRESS IN IT    
    FinalURL = BaseURL+AddressURLgoogle

    'SETTING UP THE GET REQUEST TO WEB FOR A CONNECTION         
    Set xmlRequest = CreateObject("MSXML2.XMLHTTP")
    xmlRequest.open "GET", FinalURL, False
    xmlRequest.send

    ' IF THE CONNECTION IS GOOD THEN ONLY FETCH DATA
    If xmlRequest.Status = 200 Then
        xmlData = xmlRequest.responseText
        ' FETCHING THE STATUS OF THE ADDRESS THAT WAS QUERIED
        statstrt = InStr(1, xmlData, "<status>")
        statend = InStr(1, xmlData, "</status>")
        stat = Mid(xmlData,statstrt+8,statend-(statstrt+8))
       
        ' IF THE STATUS IS OK I.E. THE ADDRESS WAS SUCCESSFULLY PARSED THEN FETCH AND PUT THE LAT AND LNG 
          ' OTHERWISE SKIP THAT RECORD
        If stat = "OK" Then
        ' TAKING OUT ONLY THE FIRST RESULT FROM THE XML RETURNED FOR THE ADDRESS SENT AND USING IT FURTHER AS A BASE
            resStrt = InStr(1, xmlData, "<result>")
            resEnd  = InStr(1, xmlData, "</result>")
            resData = Mid(xmlData,resStrt+8,resEnd-(resStrt+8))
        

            latPos = InStr(1, resData, "<lat>")
            lngPos = InStr(1, resData, "<lng>")
            loctype = InStr(1,resData,"<location_type>")
            locEndType = InStr(1,resData,"</location_type>")
            lat = Mid(resData, latPos+5, 8)
            lng = Mid(resData, lngPos+5, 10)
            loc = Mid(resData, loctype+15,locEndType-(loctype+15))
            todayOnly = ""

        ' DEPENDING ON THE LOCATION TYPE FOR THE ADDRESS RETURNED PUT IN AN INDICATOR IN THE "TODAY ONLY" FIELD   
        ' LOCATION_TYPE STORES ADDITIONAL DATA ABOUT THE SPECIFIED LOCATION. THE FOLLOWING VALUES ARE CURRENTLY SUPPORTED:
        '
        '   -> "ROOFTOP" INDICATES THAT THE RETURNED RESULT IS A PRECISE GEOCODE FOR WHICH WE HAVE LOCATION INFORMATION ACCURATE DOWN TO
        '        STREET ADDRESS PRECISION.
        '   -> "RANGE_INTERPOLATED" INDICATES THAT THE RETURNED RESULT REFLECTS AN APPROXIMATION (USUALLY ON A ROAD) INTERPOLATED BETWEEN 
        '        TWO PRECISE POINTS (SUCH AS INTERSECTIONS). INTERPOLATED RESULTS ARE GENERALLY RETURNED WHEN ROOFTOP GEOCODES ARE UNAVAILABLE
        '        FOR A STREET ADDRESS.
        '   -> "GEOMETRIC_CENTER" INDICATES THAT THE RETURNED RESULT IS THE GEOMETRIC CENTER OF A RESULT SUCH AS A POLYLINE (FOR EXAMPLE, 
        '        A STREET) OR POLYGON (REGION).
        '   -> "APPROXIMATE" INDICATES THAT THE RETURNED RESULT IS APPROXIMATE.

         
            Select Case loc
                Case "ROOFTOP"
                    todayOnly = " "
                Case "RANGE_INTERPOLATED"
                    todayOnly = "R"
                Case "GEOMETRIC_CENTER"
                    todayOnly = "G"
                Case "APPROXIMATE"
                    todayOnly = "A"
                Case else
                   msgbox "Unknown Error"
            End Select
       
        ' CHECK FOR PARTIAL MATCH TAG
            partMatchStrt = InStr(1, resData, "<partial_match>")
            partMatchEnd = InStr(1, resData, "</partial_match>")
                        
            partMatch = ""
        ' IF PARTIALMATCH TAG IS PRESENT THEN FETCH THE VALUE RETURNED FOR IT AND SET THE PARTMATCH TO 'P'  
            If partMatchStrt > 0 and partMatchEnd > 0 then
             
                matchType = Mid(resData,partMatchStrt+15,partMatchEnd-(partMatchStrt+15))
                IF matchType = "true" Then
                    partMatch = "P" 
                END If
            End If

        ' Sending the value for latitude, longitude, locationType and Partial Match Column over the screen        
         
            If todayOnly = "A" or todayOnly = "G"  Then
                ' do nothing
                LatLng = lat+","+lng
            else                      
                LatLng = lat+","+lng
            End If  
        Else
            LatLng = " "+","+" "  
            'LatLng = fetchLatLngbing(AddressURLbing)
        End If
    Else    
        LatLng = " "+","+" "
        'LatLng = fetchLatLngbing(AddressURLbing)
    End If 

End Function
'----------------------------------------------------------------------------------------------------------------'
'CLEARS THE SCREEN FOR ADDRESS-CITY-STATE-ZIPCODE
Function CleanStringAddr()
  SendString 15,11,Space(25)
  SendString 16,11,Space(25)
  SendString 17,11,Space(2)
  SendString 17,14,Space(10)
End Function
'----------------------------------------------------------------------------------------------------------------'
'UPDATES THE ADDRESS ON THE SCREEN AT THEIR RESPECTIVE POSITIONS
Function AddressUpdate(addr,city,state,zip1,zip2)
  call CleanStringAddr()
  SendString 15,11,addr
  SendString 16,11,city
  SendString 17,11,state
  SendString 17,14,zip1
  SendString 17,20,zip2

End Function 
'----------------------------------------------------------------------------------------------------------------'
'CLEARS THE SCREEN BEFORE UPDATING THE VALUES
Function CleanStringLatLng()
  SendString 19,21,Space(10)
  SendString 20,22,Space(11)
End Function
'----------------------------------------------------------------------------------------------------------------'
'MATCHES THE LAT/LNG'S FROM SCREEN TO ONES RETURENED FROM 'LatLng' FUNCTION
Function GetLatLngScreen(Latmain,Latdec,Longmain,Longdec)

  Latmainscr = GetString (19,21,2)
  Latdecscr  = GetString (19,23,5)
  Longmainscr = GetString (20,22,3)
  Longdecscr = GetString (20,25,5)

  '' TO BE REMOVED WHEN SCREEN ACCOMODATES 5 LENGTH VALUES
  Latdec = Left (Latdec,5)
  Longdec = Left (Longdec,5)

  'UNCOMMENT BELOW LINES TO COMPARE THE LAT/LNG's from screen with Google/Bing API
  'msgbox Latmainscr + " vs " + Latmain
  'msgbox Latdecscr + " vs " + Latdec
  'msgbox Longmainscr + " vs " + Longmain
  'msgbox Longdecscr + " vs " + Longdec

  'LatLongUpdate = 0-->LAT/LNG'S NEEDS UPDATION
  'LatLongUpdate = 1-->LAT/LNG'S MATCHES 
  IF Latmain=Latmainscr and Latdec=Latdecscr and Longmain=Longmainscr and Longdec=Longdecscr Then
    GetLatLngScreen = 1
  Else
    GetLatLngScreen = 0
  End If 
End Function
'----------------------------------------------------------------------------------------------------------------'
'UPDATES THE LAT/LNG'S ON THE SCREEN BUT WITH USER'S PERMISSION
Function LatLongUpdate(lat,lng)

  MyLat = Split(lat,".", -1, 1)
  MyLng = Split(lng,".", -1, 1)
              
  Latmain = MyLat(0)
  Latdec = MyLat(1)
  Longmain = MyLng(0)
  'CONVERTING LONGITUDES TO READABLE FORMAT
  If Len(Longmain) = 4 then
    Longmain = CStr(-Longmain)
  Else
    Longmain ="0"+CStr(-Longmain)
  End If 
  Longdec = MyLng(1)

  'COMPARE THE LAT/LNG FROM THE SCREEN 
  'LatLongUpdate = 0-->LAT/LNG'S NEEDS UPDATION
  'LatLongUpdate = 1-->LAT/LNG'S MATCHES 
  LatLongUpdate = GetLatLngScreen(Latmain,Latdec,Longmain,Longdec)

  If LatLongupdate = 0 Then
    'DISPLAYING LONGITUDES TO READABLE FORMAT  
    
     lng = CStr(-lng)
    
    'ASKING THE USER FOR PERMISSION TO UPDATE WITH THE DISPLAYED LAT/LNG'S
    update_latlong= msgbox("Latitude ="+lat&vbnewline+"Longitude = "+lng&vbnewline&vbnewline+"Do you want to update the Lat/Long's?", vbYesNo, "Lat-Lng Verification")
    Select Case update_latlong
    Case vbYes
      lat = Latmain + Latdec
      lng = Longmain + Longdec
      call CleanStringLatLng()
      SendString 19,21,lat
      SendString 20,22,lng
    Case vbNo
      LatLongUpdate = 1
    End Select
  Else
    'DO NOTHING 
  End If
End Function
'----------------------------------------------------------------------------------------------------------------'
'WRITE THE CDYNE RESPONSE INTO A FILE NAMED "OUTPUT1" APPEARS ON THE DESKTOP AFTER RUNNING THE MACRO 
Function WriteXMLInFile(xmlData)

  Const ForReading = 1, ForWriting = 2, ForAppending = 8
  Const TristateUseDefault = -2, TristateTrue = -1, TristateFalse = 0
  Dim fso, MyFile, FileName, TextLine
  Set fso = CreateObject("Scripting.FileSystemObject")

  set objFSO=CreateObject("Scripting.FileSystemObject")
  Set WSHshell = CreateObject("WScript.Shell")
  desktop = WSHShell.SpecialFolders("Desktop")
  pathstring = objFSO.GetAbsolutePathName(desktop)

  FileName = pathstring+"\output1.txt"
  Set MyFile = fso.OpenTextFile(FileName, ForWriting, True)
  MyFile.WriteLine xmlData
  MyFile.Close
  Set MyFile = fso.OpenTextFile(FileName, ForReading)
  Do While MyFile.AtEndOfStream <> True
  TextLine = MyFile.ReadLine
  Loop
  MyFile.Close

End Function
'----------------------------------------------------------------------------------------------------------------'
'FETCHES THE LAT/LNG'S FROM BING
Function fetchLatLngbing(AddressURL)

  Dim key
  'PART OF URL THAT HITS THE BING SERVERS TO GET LAT/LNG
  BaseURL="http://dev.virtualearth.net/REST/v1/Locations/US/"
  'ONE KEY IS GENERATED FOR A USER HOLDING A MICROSOFT ACCOUNT
  key="?o=xml&key=Atvh3yWGZroEGuvrZilpk4ctXJ2qOnNava4wsmd8Rz92ncOgeZcJ4_Ue0QKBCHB1"
  'GENERATING THE ENTIRE URL WITH ADDRESS IN IT  
  FinalURL = BaseURL+AddressURL+key

  'SETTING UP THE GET REQUEST TO WEB FOR A CONNECTION
  Set xmlRequest = CreateObject("MSXML2.XMLHTTP")
  xmlRequest.open "GET", FinalURL, False
  xmlRequest.send
          
  'IF THE CONNECTION IS GOOD THEN ONLY FETCH DATA
  
  If xmlRequest.Status = 200 Then
    xmlData = xmlRequest.responseText

    'SETUP THE XML RESPONSE IN DOM MODEL TO READ THE DATA WITHIN THE TAGS
    Set objXMLDoc  = CreateObject("Microsoft.XMLDOM")
    objXMLDoc.async = false
    objXMLDoc.loadXML(xmlData)

    Set Root = objXMLDoc.documentElement
    Set sd = Root.getElementsByTagName("StatusDescription")(0)
    Set ET = Root.getElementsByTagName("EstimatedTotal")(0)

    If ET.text > 0 Then  
      If sd.text = "OK" Then
    
        set conf = Root.getElementsByTagName("Confidence")(0)
        set mc = Root.getElementsByTagName("MatchCode")(0)

        'mc ERROR IT GETS FIXED IF WE DISPLAY THE BELOW STATEMENT
        'msgbox ("The address returned from Bing is-"+mc.text+"-"+conf.text)  

        'rcvalid = 0 - WILL NOT FETCH LAT/LNG'S FROM BING 
        'rcvalid = 1 - WILL FETCH LAT/LNG'S FROM BING 
        'THE MEANING OF THE CASES-  
        'GOOD-HIGH - DIRECTLY FETCHES LAT/LNG'S | rcvalid = 1
        'GOOD-MEDIUM - DIRECTLY FETCHES LAT/LNG'S | rcvalid = 1
        'AMBIGUOUS-MEDIUM - FETECHES FOR MULTIPLE ADDRESSES OPTION THEN LAT/LNG'S | rcvalid = 1
        'AMBIGUOUS-LOW - WILL NOT FETCH LAT/LNG'S FROM BING | rcvalid = 0
        'UPHIERARCHY-MEDIUM - FETECHES FOR MULTIPLE ADDRESSES OPTION THEN LAT/LNG'S | rcvalid = 1
        'UPHIERARCHY-LOW - WILL NOT FETCH LAT/LNG'S FROM BING | rcvalid = 0
        Select Case mc.text
        Case "Good"
          Select Case conf.text
          Case "High" 
            fetchLatLngbing = fetchLatLng(xmlData)
            rcvalid=1
          Case "Medium"   
            fetchLatLngbing = fetchLatLng(xmlData) 
            rcvalid=1  
        End Select
        Case "Ambiguous"
          Select Case conf.text
          Case "Medium"   
            fetchLatLngbing = fetchLatLng(xmlData)
            rcvalid=1
          Case "Low"  
            rcvalid=0  
        End Select
        Case "UpHierarchy"
          Select Case conf.text
          Case "Medium"   
            fetchLatLngbing = fetchLatLng(xmlData)
            rcvalid=1
          Case "Low"  
            rcvalid=0    
        End Select    
        End Select  
          
        If rcvalid = 0 Then
          fetchLatLngbing = " "+","+" "
        End If
      Else  
        fetchLatLngbing = " "+","+" "    
      End If
    Else
      fetchLatLngbing = " "+","+" "
    End If
  Else
  fetchLatLngbing = " "+","+" "
  End If    
End Function
'----------------------------------------------------------------------------------------------------------------'
'FETCHES LATS/LNG'S FROM BING DIRECTLY
Function fetchLatLng(xmlData)

  Dim disp2(5)
  Dim lat1(5)
  Dim lng1(5)
  Dim Maindisp,disp1,respno

  'SETUP THE XML RESPONSE IN DOM MODEL TO READ THE DATA WITHIN THE TAGS
  Set objXMLDoc  = CreateObject("Microsoft.XMLDOM")
  objXMLDoc.async = false
  objXMLDoc.loadXML(xmlData)  
  Set Root = objXMLDoc.documentElement
  Set NodeList = Root.getElementsByTagName("GeocodePoint")

  For Each Elem In NodeList

    set lat = Elem.getElementsByTagName("Latitude")(0)
    set lng = Elem.getElementsByTagName("Longitude")(0)
    set ut =  Elem.getElementsByTagName("UsageType")(0)
    
    latRoff=Round(lat.text,5)
    lngRoff=Round(lng.text,5)
    utD = ut.text
    'PICKS THE VALUE OF LAT/LNG'S WITH 'Display' AS THE INPUT VALUE OF USAGE TYPE AS THAT IS THE MOST APT LAT/LNG VALUE
    IF utD = "Display" Then
      resp = x
    End If
    
    lat1(x)= latRoff
    lng1(x)= lngRoff
          x=x+1    
  Next
  fetchLatLng= Cstr(lat1(resp))+","+Cstr(lng1(resp))
            
End Function
